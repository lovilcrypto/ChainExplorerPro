import requests
import pandas as pd
import matplotlib.pyplot as plt

class ChainExplorerPro:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = 'https://api.etherscan.io/api'

    def get_block_data(self, block_number: int) -> dict:
        """Fetches block data for a given block number."""
        url = self.base_url
        params = {
            'module': 'block',
            'action': 'getblockreward',
            'blockno': block_number,
            'apikey': self.api_key
        }
        response = requests.get(url, params=params)
        return response.json()

    def get_transaction_data(self, tx_hash: str) -> dict:
        """Fetches transaction details for a given transaction hash."""
        url = self.base_url
        params = {
            'module': 'proxy',
            'action': 'eth_getTransactionByHash',
            'txhash': tx_hash,
            'apikey': self.api_key
        }
        response = requests.get(url, params=params)
        return response.json()

    def get_contract_data(self, contract_address: str) -> dict:
        """Fetches smart contract details for a given contract address."""
        url = self.base_url
        params = {
            'module': 'contract',
            'action': 'getabi',
            'address': contract_address,
            'apikey': self.api_key
        }
        response = requests.get(url, params=params)
        return response.json()

    def plot_block_rewards(self, start_block: int, end_block: int):
        """Plots block rewards for a range of blocks."""
        rewards = []
        blocks = range(start_block, end_block + 1)
        
        for block in blocks:
            data = self.get_block_data(block)
            if data['status'] == '1':
                rewards.append({
                    'block': block,
                    'reward': float(data['result']['blockReward']) / 10**18  # Convert from wei to ETH
                })

        df = pd.DataFrame(rewards)
        if df.empty:
            print("No block reward data found.")
            return

        plt.figure(figsize=(12, 6))
        plt.plot(df['block'], df['reward'], marker='o', linestyle='-', color='b')
        plt.title('Block Rewards')
        plt.xlabel('Block Number')
        plt.ylabel('Reward (ETH)')
        plt.grid(True)
        plt.show()

    def display_transaction_details(self, tx_hash: str):
        """Displays details for a specific transaction."""
        tx_details = self.get_transaction_data(tx_hash)
        if not tx_details or tx_details['result'] is None:
            print("No transaction details found.")
            return

        tx = tx_details['result']
        print(f"Transaction Details for Hash {tx_hash}:")
        print(f"Block Number: {tx['blockNumber']}")
        print(f"From: {tx['from']}")
        print(f"To: {tx['to']}")
        print(f"Value: {int(tx['value'], 16) / 10**18} ETH")
        print(f"Gas Price: {int(tx['gasPrice'], 16) / 10**9} Gwei")
        print(f"Gas Used: {int(tx['gas'], 16)}")
        print(f"Nonce: {int(tx['nonce'], 16)}")

    def display_contract_abi(self, contract_address: str):
        """Displays the ABI of a smart contract."""
        contract_data = self.get_contract_data(contract_address)
        if not contract_data or contract_data['result'] == 'Contract source code not verified':
            print("No contract ABI found or contract not verified.")
            return

        print(f"ABI for Contract Address {contract_address}:")
        print(contract_data['result'])

# Example Usage
if __name__ == "__main__":
    api_key = 'YOUR_ETHERSCAN_API_KEY'  # Replace with your Etherscan API key
    chain_explorer_pro = ChainExplorerPro(api_key)

    # Plot Block Rewards
    chain_explorer_pro.plot_block_rewards(start_block=15000000, end_block=15001000)

    # Display Transaction Details
    tx_hash = '0x5f3f3e25b0c1f69d8262f6a35ab45e0f8a6d7a8d18d569b33b8e8c536d8a6b8d'  # Example transaction hash
    chain_explorer_pro.display_transaction_details(tx_hash)

    # Display Contract ABI
    contract_address = '0x5f3f3e25b0c1f69d8262f6a35ab45e0f8a6d7a8d'  # Example contract address
    chain_explorer_pro.display_contract_abi(contract_address)
